<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:os="http://www.mulesoft.org/schema/mule/os"
	xmlns:s3="http://www.mulesoft.org/schema/mule/s3"
	xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:dynamodb="http://www.mulesoft.org/schema/mule/dynamodb" xmlns:secure-properties="http://www.mulesoft.org/schema/mule/secure-properties" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/secure-properties http://www.mulesoft.org/schema/mule/secure-properties/current/mule-secure-properties.xsd
http://www.mulesoft.org/schema/mule/dynamodb http://www.mulesoft.org/schema/mule/dynamodb/current/mule-dynamodb.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	<global-property doc:name="Global Property" doc:id="5b06a8d4-12ac-4135-925d-1d004cf15162" name="env" value="localhost" />
	<configuration-properties doc:name="Configuration properties" doc:id="dad7a6e9-fe79-4df6-b8d7-2f3b00026bb2" file="${env}-properties.yaml" />
	<http:listener-config name="localhost" doc:name="HTTP Listener config" doc:id="57f060cc-46ee-4a08-a1c0-adfae16a38d5" >
		<http:listener-connection host="0.0.0.0" port="${http.port}" >
		</http:listener-connection>
	</http:listener-config>
	<secure-properties:config name="Secure_Properties_Config" doc:name="Secure Properties Config" doc:id="d99adc7c-b11c-4083-9bea-154e0d43b979" file="secureProperties.yaml" key='mulesoft' >
		<secure-properties:encrypt algorithm="Blowfish" />
	</secure-properties:config>
	<file:config name="File_Config" doc:name="File Config" doc:id="05f24e3a-7388-4fd7-826e-5649a5562c24" />
	<dynamodb:config name="Amazon_DynamoDB_Configuration" doc:name="Amazon DynamoDB Configuration" doc:id="3c061d52-f225-40cd-9311-07eb7861895a" >
		<dynamodb:basic-connection accessKey="${secure::aws.accesskey}" secretKey="${secure::aws.secretkey}" region="${secure::aws.region}"/>
	</dynamodb:config>
	<s3:config name="Amazon_S3_Configuration" doc:name="Amazon S3 Configuration" doc:id="ab10dd8b-4249-4e62-abe0-0c3d3fcff307" >
		<s3:basic-connection accessKey="${secure::aws.accesskey}" secretKey="${secure::aws.secretkey}" region="${secure::aws.region}" />
	</s3:config>
	<configuration doc:name="Configuration" doc:id="9d16b374-1e51-4968-a0cd-d7f706144926" defaultErrorHandler-ref="GlobalErrorHandlerError_Handler" />
	<validation:config name="Validation_Config" doc:name="Validation Config" doc:id="e73996c3-bad2-4e14-a7c9-d5733f3108ac" />
	<flow name="mule-dynamodb-intigrationFlow" doc:id="4d67e36c-6e63-44ae-b82f-6ae202626642" >
		<http:listener doc:name="Listener" doc:id="278c22f9-f95f-4a31-81b5-e00b3c4ace43" config-ref="localhost" path="/dynamo" allowedMethods="POST"/>
		<os:contains doc:name="Check for token key in Object Store" doc:id="550703f3-373f-4e06-b4d0-d1e7eae12d73" key="#[attributes.headers.token]" objectStore="Object_store" target="loginStatus"/>
		<choice doc:name="Choice" doc:id="c259436b-e21b-4063-bcab-a8ae6c9f1277" >
			<when expression="#[vars.loginStatus == false]">
				<raise-error doc:name="login status is false" doc:id="db5077b2-b799-4bcd-866c-c6225183dea3" type="APP:SESSION_EXPIRED" description="#[p('message.app.session_expired')]"/>
			</when>
			<otherwise >
				<os:store doc:name="User session extend." doc:id="6b11425b-6a93-4624-95ce-5716f09836d9" key="#[attributes.headers.token]">
					<os:value ><![CDATA[#[%dw 2.0
output application/json
---
{
	ttl: (now() as Number) + (p('session.ttl') as Number)
}]]]></os:value>
				</os:store>
				<validation:is-not-blank-string doc:name="check title field for null/blank/empty" doc:id="44186036-0711-490f-8400-a2d65e065ba6" value='#[payload."title"]' config-ref="Validation_Config" message='#["VALIDATION_FAILED : Title must not be empty/null."]'/>
				<validation:is-not-blank-string doc:name="check type field for null/blank/empty" doc:id="64cdadbd-6cf7-4f93-995d-e054be01d0f7" config-ref="Validation_Config" value='#[payload."type"]' message='#["VALIDATION_FAILED : Type field must not be blank."]'/>
				<ee:transform doc:name="format input json" doc:id="351b3ae8-d197-4070-901e-1142501fdada">
			<ee:message>
						<ee:set-payload resource="dwl/input-payload-to-output-payload.dwl" />
			</ee:message>
		</ee:transform>
				<ee:transform doc:name="prepare json for dynamodb" doc:id="892bfaf2-0060-42c4-bc3e-5a402a963918">
				<ee:message>
						<ee:set-payload resource="dwl/prepare-json-for-dynamodb.dwl" />
				</ee:message>
			</ee:transform>
				<dynamodb:put-item doc:name="Put item" doc:id="08349eeb-709d-49ce-b868-f81bd0640a77" config-ref="Amazon_DynamoDB_Configuration" tableName="netflix">
				</dynamodb:put-item>
				<choice doc:name="Choice" doc:id="2c4b4a5e-92c0-4a6c-892d-2b2ec8cd1847" >
					<when expression="#[isEmpty(payload.attributes) == false]">
						<ee:transform doc:name="Transform Message" doc:id="eb520413-9c45-4445-b182-5ed458f0a073" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
							</ee:message>
						</ee:transform>
					</when>
					<otherwise >
						<ee:transform doc:name="Transform Message" doc:id="733c5225-4f82-43d0-b042-2f3eef98096a" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
							</ee:message>
						</ee:transform>
					</otherwise>
				</choice>
			</otherwise>
		</choice>
		<error-handler>
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="5e3eb857-a3b0-4e21-b678-f9aaf55085bf" type="VALIDATION:*">
				<set-payload value='#[error.description]' doc:name="Set Payload" doc:id="1ac1d6a1-e58b-472b-a599-51e5f1e82065" />
				<flow-ref doc:name="Flow Reference" doc:id="1a6bbf27-ef49-49b8-9d10-9710276ba89f" name="mule-s3buckt-intigrationFlow"/>
			</on-error-propagate>
		</error-handler>
	</flow>
	<flow name="mule-dynamodb-intigrationFlow2" doc:id="d6dd79fe-9de1-47b2-95b7-f144e5e17c48" >
		<http:listener doc:name="Listener" doc:id="04df3e4e-3919-436b-a4b9-868cef20fe14" config-ref="localhost" path="/dynamo" allowedMethods="DELETE"/>
		<os:contains doc:name="Check for token key in Object Store" doc:id="b053ae40-a1ec-4a44-a530-4ae03c05d0a3" key="#[attributes.headers.token]" objectStore="Object_store" target="loginStatus"/>
		<choice doc:name="Choice" doc:id="4c9f91ec-60cc-4368-974c-fc8ce4d8e351" >
			<when expression="#[vars.loginStatus == false]">
				<raise-error doc:name="login status is false" doc:id="225a36fe-07e9-4459-aae5-7c7c1b5b53d1" type="APP:SESSION_EXPIRED" description="#[p('message.app.session_expired')]"/>
			</when>
			<otherwise >
				<os:store doc:name="User session extend." doc:id="00eb3ad2-786a-45a0-9d4e-5b4baaee3d2f" key="#[attributes.headers.token]">
					<os:value ><![CDATA[#[%dw 2.0
output application/json
---
{
	ttl: (now() as Number) + (p('session.ttl') as Number)
}]]]></os:value>
				</os:store>
				<dynamodb:delete-item doc:name="Delete item" doc:id="04743b4d-dd32-4ceb-bf79-ff52e2f58c67" config-ref="Amazon_DynamoDB_Configuration" tableName="netflix">
					<dynamodb:primarykey ><![CDATA[#[%dw 2.0
output application/json
---
{
	"title" : {"S" : "Dick Johnson Is Dead"},
	"type" : {"S" : "TV Show"}
}]]]></dynamodb:primarykey>
				</dynamodb:delete-item>
				<ee:transform doc:name="Transform Message" doc:id="be0ca43b-1be1-415b-9aa6-57ef1b4250e2">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	"payload" : payload,
	"attributes" : attributes
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			</otherwise>
		</choice>
	</flow>
	<flow name="mule-dynamodb-intigration-Scan-Flow" doc:id="2f45e793-a27a-4b5c-8497-c281130474c2" >
		<http:listener doc:name="Listener" doc:id="f2fd982c-fbd7-4f06-aa61-9f9d99e68f29" config-ref="localhost" path="/scan"/>
		<set-variable value="#[':title' : {'S' : 'Dick Johnson Is Dead'}]" doc:name="title" doc:id="5a9fba9b-925a-42ce-beea-dc4b3b069263" variableName="key"/>
		<set-variable value="#[':category' : {'S' : 'Movie'}]" doc:name="category" doc:id="0d8f843c-a6ae-4b27-ae22-8a1554bdde02" variableName='category'/>
		<dynamodb:scan doc:name="Scan" doc:id="9cd07d59-0d3f-4832-a468-fb94e93bca3a" config-ref="Amazon_DynamoDB_Configuration" tableName="netflix" select="ALL_ATTRIBUTES">
		</dynamodb:scan>
		<ee:transform doc:name="Transform Message" doc:id="50dbe967-87d5-49dd-b0c9-be3cf77257d0" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="mule-dynamodb-intigration-Get-Item-Flow" doc:id="328adf2d-34eb-4859-a553-dd80e00a26de">
		<http:listener doc:name="Listener" doc:id="266fdf68-70b0-4983-9f81-833c2cbb4540" config-ref="localhost" path="/dynamo" allowedMethods="GET" />
		<os:contains doc:name="Check for token key in Object Store" doc:id="1e2f25fd-ba12-4f35-a235-64ffdb6dcfd6" key="#[attributes.headers.token]" objectStore="Object_store" target="loginStatus" />
		<choice doc:name="Choice" doc:id="e8595b55-3e5e-48fa-8c3f-739ec60a20e8">
			<when expression="#[vars.loginStatus == false]">
				<raise-error doc:name="login status is false" doc:id="0f30b583-46e3-4fc2-a9d3-5d4bb70dccc7" type="APP:SESSION_EXPIRED" description="#[p('message.app.session_expired')]" />
			</when>
			<otherwise>
			
				<os:store doc:name="User session extend." doc:id="9dc5506f-99d0-4121-a61c-edb11363190e" key="#[attributes.headers.token]">
					<os:value><![CDATA[#[%dw 2.0
output application/json
---
{
	ttl: (now() as Number) + (p('session.ttl') as Number)
}]]]></os:value>
				</os:store>
				<dynamodb:get-item doc:name="Get item" doc:id="5cfc0c82-396f-4e59-ab15-0dcde4277638" config-ref="Amazon_DynamoDB_Configuration" tableName="netflix">
					<reconnect />
					<dynamodb:key><![CDATA[#[%dw 2.0
output application/json
---
{
	"title": {"S": "Dick Johnson Is Dead"},
	"type": {"S": "Movie"}
}]]]></dynamodb:key>
				</dynamodb:get-item>
				<ee:transform doc:name="Transform Message" doc:id="0891146d-20fc-4275-abcf-4f8988322f71">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
	</flow>
	<flow name="mule-dynamodb-intigrationFlow1" doc:id="f168519c-0bf8-400d-b81b-e95d126804f5" >
		<http:listener doc:name="Listener" doc:id="a2a618cb-9bce-44fc-9673-75016e9b292a" config-ref="localhost" path="/xml-upload"/>
		<ee:transform doc:name="Transform Message" doc:id="8b51a52a-447b-4be0-b0ad-468e6cfbafd1" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
fun arrayElement(inputArr : Array) = 
	if( sizeOf(inputArr) > 0) inputArr else	["NA"] 
---
payload.parts.netflix.content map(item, index) -> {
	"id": item."show_id" as String,
	"category": item."type" as String,
	"title" : item.title as String,
	"director" : arrayElement(item."director" splitBy (",") filter(i, index) -> i != ""),
	"cast" : arrayElement(item."cast" splitBy(",") filter(i, index) -> i != ""),
	"country" : item."country" as String,
	"release_year" : item."release_year" as String,
	"date_added" : item."date_added" as String,
	"rating" : item."rating" as String,
	"duration" : item."duration" as String,
	"geners" : arrayElement(item."listed_in" splitBy(",") filter(i, index) -> i != ""),
    "description" : item."description" as String	
		
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<foreach doc:name="For Each" doc:id="3aa147ab-c317-40cb-bda7-27fa16e0b905" collection="#[payload]">

				<ee:transform doc:name="prepare json for dynamodb" doc:id="309934d3-4ea6-46c7-a05c-1301271deb45">
				<ee:message>
						<ee:set-payload resource="dwl/prepare-json-for-dynamodb.dwl" />
				</ee:message>
			</ee:transform>
			<dynamodb:put-item tableName="netflix" doc:name="Put item" doc:id="030099d7-14bd-4723-9feb-24a57737451c" config-ref="Amazon_DynamoDB_Configuration"/>
		

		</foreach>
	</flow>
	<flow name="mule-dynamodb-intigration-Query-Flow" doc:id="664f13f4-209f-42df-869d-6ed2c1deae78" >
		<http:listener doc:name="Listener" doc:id="d10e7169-bea8-4bb2-9df6-a06d9d897eb2" config-ref="localhost" path="/query"/>
		<set-variable value='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	":title" : {"S" : "Dick Johnson Is Dead"},&#10;	":category" : {"S" : "Movie"}&#10;}]' doc:name="title" doc:id="53a80713-3088-4174-93d2-f20170555c4d" variableName="title"/>
		<set-variable value='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"category" : {&#10;		"S" : "Movie"&#10;	}&#10;}]' doc:name="category" doc:id="46ff4366-b650-4960-86d5-c77ca0d63156" variableName="category" />
		<ee:transform doc:name="Transform Message" doc:id="2d682724-1cb9-4a55-8caf-5de7cf507c99" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
